#!/usr/bin/env sh

PATH=$PATH ; export PATH

echo "\n\nIf you make a mistake, it's best to kill this program (CTRL-C)\n\
and start over rather than submitting typos which will need to\n\
be fixed manually on the server later.\n\n\n"

read -p "Enter your server's SSH IP address : " TARGET_HOST
read -p "Enter your server's domain name : " TARGET_HOSTNAME
read -p "Enter an email address for server notifications : " TARGET_EMAILADDR
read -p "Enter that email account's password (no 2FA! make an \"app password\") : " TARGET_EMAILPASS
read -p "Enter your AWS id with SES access to use for email list functionality : " TARGET_AWSKEYID
read -p "Enter your AWS secret for the above AWS id : " TARGET_AWSKEYSECR
read -p "Enter your AWS region for SES (probably us-east-1 in the U.S.) : " TARGET_AWSREGION
read -p "Enter an email address with POP3 turned on to catch bounces (A \"DEDICATED\" one, NOT one used by a person) : " TARGET_BOUNCEADDR
read -p "Enter that email account's password (no 2FA! make an \"app password\") : " TARGET_BOUNCEPASS
read -p "Install a firewall (recommended)? It will restrict incoming traffic EXCEPT websites and ssh (y/n)? : " UFW_ANSWER

MAILDOMAIN=`echo $TARGET_EMAILADDR | sed -e 's/.*@\(.*\)$/\1/'`
BOUNCEDOMAIN=`echo $TARGET_BOUNCEADDR | sed -e 's/.*@\(.*\)$/\1/'`

if [ "$MAILDOMAIN" != "gmail.com" ] && [ "$MAILDOMAIN" != "yahoo.com" ] && [ "$MAILDOMAIN" != "aol.com" ] && [ "$MAILDOMAIN" != "outlook.com" ] && [ "$MAILDOMAIN" != "hotmail.com" ]
then
	read -p "I don't know how the email for $MAILDOMAIN is sent, I need the smtp (outgoing) server address : " TARGET_SMTP
	read -p "Next I need the $MAILDOMAIN SMTP server port (probably 587 or 465) : " TARGET_SMTPPORT
	read -p "Should TLS be enabled (probably yes on port 587) for $MAILDOMAIN mail? (y/n) : " TARGET_SMTPTLS
	read -p "Should STARTTLS be enabled (probably yes on port 587) for $MAILDOMAIN mail? (y/n) : " TARGET_SMTPSTLS
    read -p "Should SSL be enabled (probably yes on port 465, probably no on port 587) for $MAILDOMAIN mail? (y/n) : " TARGET_SMTPSSL
fi

if [ "$BOUNCEDOMAIN" != "gmail.com" ] && [ "$BOUNCEDOMAIN" != "yahoo.com" ] && [ "$BOUNCEDOMAIN" != "aol.com" ] && [ "$BOUNCEDOMAIN" != "outlook.com" ] && [ "$BOUNCEDOMAIN" != "hotmail.com" ] && [ "$MAILDOMAIN" != "$BOUNCEDOMAIN" ]
then
	read -p "I don't know how the email for $BOUNCEDOMAIN is received, I need the pop (incoming) server address : " BOUNCE_POP
	read -p "Next I need the $BOUNCEDOMAIN POP server port (probably 995 or 110) : " BOUNCE_POPPORT
    read -p "Should SSL be enabled (probably yes on port 995, probably no on port 110) for $BOUNCEDOMAIN mail? (y/n) : " BOUNCE_POPSSL
fi

if [ "$BOUNCEDOMAIN" = "icloud.com" ] || [ "$BOUNCEDOMAIN" = "me.com" ] || [ "$BOUNCEDOMAIN" = "mac.com" ]
then
	echo "Apple's email services, including icloud.com, me.com, and mac.com, do not\n 
	support POP access for receiving mail. Please use another email address from a\n
	different provider for your bounced mail handling address.\n\n"
	exit 1
else
	:
fi

export TARGET_HOST
export TARGET_HOSTNAME
export TARGET_EMAILADDR
export TARGET_EMAILPASS
export UFW_ANSWER
export TARGET_AWSKEYID
export TARGET_AWSKEYSECR
export TARGET_AWSREGION
export TARGET_BOUNCEADDR
export TARGET_BOUNCEPASS
export TARGET_SMTP
export TARGET_SMTPPORT
export TARGET_SMTPTLS
export TARGET_STARTTLS
export TARGET_SMTPSSL
export BOUNCE_POP
export BOUNCE_POPPORT
export BOUNCE_POPSSL

ansible-playbook ./includes/main.yml -i "$TARGET_HOST",

exit 0;
